/*
 * This file is generated by jOOQ.
 */
package cn.linmt.jooq.generate.tables;


import cn.linmt.jooq.generate.Keys;
import cn.linmt.jooq.generate.SpringBoot;
import cn.linmt.jooq.generate.tables.records.BookRecord;

import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TableBook extends TableImpl<BookRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>spring_boot.book</code>
     */
    public static final TableBook T_BOOK = new TableBook();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BookRecord> getRecordType() {
        return BookRecord.class;
    }

    /**
     * The column <code>spring_boot.book.id</code>. 主键ID
     */
    public final TableField<BookRecord, Long> T_ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "主键ID");

    /**
     * The column <code>spring_boot.book.book_name</code>. 书名
     */
    public final TableField<BookRecord, String> T_BOOK_NAME = createField(DSL.name("book_name"), SQLDataType.VARCHAR(32).nullable(false), this, "书名");

    /**
     * The column <code>spring_boot.book.author_id</code>. 作者ID
     */
    public final TableField<BookRecord, Long> T_AUTHOR_ID = createField(DSL.name("author_id"), SQLDataType.BIGINT.nullable(false), this, "作者ID");

    /**
     * The column <code>spring_boot.book.created_by</code>. 创建者
     */
    public final TableField<BookRecord, Long> T_CREATED_BY = createField(DSL.name("created_by"), SQLDataType.BIGINT.nullable(false), this, "创建者");

    /**
     * The column <code>spring_boot.book.modified_by</code>. 更新者
     */
    public final TableField<BookRecord, Long> T_MODIFIED_BY = createField(DSL.name("modified_by"), SQLDataType.BIGINT, this, "更新者");

    /**
     * The column <code>spring_boot.book.gmt_created</code>. 创建时间
     */
    public final TableField<BookRecord, LocalDateTime> T_GMT_CREATED = createField(DSL.name("gmt_created"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "创建时间");

    /**
     * The column <code>spring_boot.book.gmt_modified</code>. 更新时间
     */
    public final TableField<BookRecord, LocalDateTime> T_GMT_MODIFIED = createField(DSL.name("gmt_modified"), SQLDataType.LOCALDATETIME(0), this, "更新时间");

    private TableBook(Name alias, Table<BookRecord> aliased) {
        this(alias, aliased, null);
    }

    private TableBook(Name alias, Table<BookRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>spring_boot.book</code> table reference
     */
    public TableBook(String alias) {
        this(DSL.name(alias), T_BOOK);
    }

    /**
     * Create an aliased <code>spring_boot.book</code> table reference
     */
    public TableBook(Name alias) {
        this(alias, T_BOOK);
    }

    /**
     * Create a <code>spring_boot.book</code> table reference
     */
    public TableBook() {
        this(DSL.name("book"), null);
    }

    public <O extends Record> TableBook(Table<O> child, ForeignKey<O, BookRecord> key) {
        super(child, key, T_BOOK);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : SpringBoot.T_SPRING_BOOT;
    }

    @Override
    public UniqueKey<BookRecord> getPrimaryKey() {
        return Keys.T_KEY_BOOK_PRIMARY;
    }

    @Override
    public TableBook as(String alias) {
        return new TableBook(DSL.name(alias), this);
    }

    @Override
    public TableBook as(Name alias) {
        return new TableBook(alias, this);
    }

    @Override
    public TableBook as(Table<?> alias) {
        return new TableBook(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TableBook rename(String name) {
        return new TableBook(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TableBook rename(Name name) {
        return new TableBook(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TableBook rename(Table<?> name) {
        return new TableBook(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, String, Long, Long, Long, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Long, ? super String, ? super Long, ? super Long, ? super Long, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Long, ? super String, ? super Long, ? super Long, ? super Long, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
